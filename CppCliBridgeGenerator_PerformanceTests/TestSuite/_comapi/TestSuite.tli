// Created by Microsoft (R) C/C++ Compiler Version 10.00.40219.01 (a71e9a4a).
//
// c:\users\uzivatel\documents\github\cpp_net_interop\cppclibridgegenerator_performancetests\testsuite\_comapi\testsuite.tli
//
// Wrapper implementations for Win32 type library TestSuite.tlb
// compiler-generated file created 06/16/15 at 18:53:48 - DO NOT EDIT!

#pragma once

//
// interface _Stuff wrapper method implementations
//

inline _bstr_t _Stuff::GetToString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ToString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline VARIANT_BOOL _Stuff::Equals ( const _variant_t & obj ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Equals(obj, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long _Stuff::GetHashCode ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetHashCode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline mscorlib::_TypePtr _Stuff::GetType ( ) {
    struct mscorlib::_Type * _result = 0;
    HRESULT _hr = raw_GetType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return mscorlib::_TypePtr(_result, false);
}

inline SAFEARRAY * _Stuff::GetIntsProperty ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_IntsProperty(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Stuff::PutIntsProperty ( SAFEARRAY * pRetVal ) {
    HRESULT _hr = put_IntsProperty(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t _Stuff::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void _Stuff::PutName ( _bstr_t pRetVal ) {
    HRESULT _hr = put_Name(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline SAFEARRAY * _Stuff::GetIntsField ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_IntsField(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Stuff::PutIntsField ( SAFEARRAY * pRetVal ) {
    HRESULT _hr = put_IntsField(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum TestEnum _Stuff::Getlineending ( ) {
    enum TestEnum _result;
    HRESULT _hr = get_lineending(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Stuff::Putlineending ( enum TestEnum pRetVal ) {
    HRESULT _hr = put_lineending(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _PrintCallback wrapper method implementations
//

inline _bstr_t _PrintCallback::GetToString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ToString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline VARIANT_BOOL _PrintCallback::Equals ( const _variant_t & obj ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Equals(obj, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long _PrintCallback::GetHashCode ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetHashCode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline mscorlib::_TypePtr _PrintCallback::GetType ( ) {
    struct mscorlib::_Type * _result = 0;
    HRESULT _hr = raw_GetType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return mscorlib::_TypePtr(_result, false);
}

inline SAFEARRAY * _PrintCallback::GetInvocationList ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_GetInvocationList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _variant_t _PrintCallback::Clone ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Clone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline HRESULT _PrintCallback::GetObjectData ( struct mscorlib::_SerializationInfo * info, struct mscorlib::StreamingContext context ) {
    HRESULT _hr = raw_GetObjectData(info, context);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _variant_t _PrintCallback::DynamicInvoke ( SAFEARRAY * args ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_DynamicInvoke(args, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline mscorlib::_MethodInfoPtr _PrintCallback::GetMethod ( ) {
    struct mscorlib::_MethodInfo * _result = 0;
    HRESULT _hr = get_Method(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return mscorlib::_MethodInfoPtr(_result, false);
}

inline _variant_t _PrintCallback::GetTarget ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Target(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _bstr_t _PrintCallback::Invoke_2 ( _bstr_t str, long i ) {
    BSTR _result = 0;
    HRESULT _hr = raw_Invoke_2(str, i, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline mscorlib::IAsyncResultPtr _PrintCallback::BeginInvoke ( _bstr_t str, long i, struct mscorlib::_AsyncCallback * callback, const _variant_t & object ) {
    struct mscorlib::IAsyncResult * _result = 0;
    HRESULT _hr = raw_BeginInvoke(str, i, callback, object, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return mscorlib::IAsyncResultPtr(_result, false);
}

inline _bstr_t _PrintCallback::EndInvoke ( struct mscorlib::IAsyncResult * result ) {
    BSTR _result = 0;
    HRESULT _hr = raw_EndInvoke(result, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface _Arrays wrapper method implementations
//

inline _bstr_t _Arrays::GetToString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ToString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline VARIANT_BOOL _Arrays::Equals ( const _variant_t & obj ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Equals(obj, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long _Arrays::GetHashCode ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetHashCode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline mscorlib::_TypePtr _Arrays::GetType ( ) {
    struct mscorlib::_Type * _result = 0;
    HRESULT _hr = raw_GetType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return mscorlib::_TypePtr(_result, false);
}

inline _bstr_t _Arrays::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void _Arrays::PutName ( _bstr_t pRetVal ) {
    HRESULT _hr = put_Name(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t _Arrays::GetStrings1 ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetStrings1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline SAFEARRAY * _Arrays::GetStrings2 ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_GetStrings2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT _Arrays::test ( SAFEARRAY * strs ) {
    HRESULT _hr = raw_test(strs);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline SAFEARRAY * _Arrays::GetStrings3 ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_GetStrings3(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT _Arrays::SetInt ( long i ) {
    HRESULT _hr = raw_SetInt(i);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long _Arrays::GetInt ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetInt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline SAFEARRAY * _Arrays::GetInts1 ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_GetInts1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _StuffPtr _Arrays::GetObject ( ) {
    struct _Stuff * _result = 0;
    HRESULT _hr = raw_GetObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _StuffPtr(_result, false);
}

inline SAFEARRAY * _Arrays::GetObjects ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_GetObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _StuffPtr _Arrays::SetObject ( struct _Stuff * s ) {
    struct _Stuff * _result = 0;
    HRESULT _hr = raw_SetObject(s, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _StuffPtr(_result, false);
}

inline _StuffPtr _Arrays::SetObjects ( SAFEARRAY * s ) {
    struct _Stuff * _result = 0;
    HRESULT _hr = raw_SetObjects(s, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _StuffPtr(_result, false);
}

inline HRESULT _Arrays::callbackSet ( _bstr_t mode, struct _PrintCallback * cb ) {
    HRESULT _hr = raw_callbackSet(mode, cb);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _Arrays::callbackInvoke ( ) {
    HRESULT _hr = raw_callbackInvoke();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _Arrays::structSet ( struct Simple s ) {
    HRESULT _hr = raw_structSet(s);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline struct Simple _Arrays::structGet ( ) {
    struct Simple _result;
    HRESULT _hr = raw_structGet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT _Arrays::structSetPosition ( long i ) {
    HRESULT _hr = raw_structSetPosition(i);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _Arrays::structSetPosition_2 ( struct Simple s, long i ) {
    HRESULT _hr = raw_structSetPosition_2(s, i);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long _Arrays::structGetPosition ( ) {
    long _result = 0;
    HRESULT _hr = raw_structGetPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long _Arrays::structGetPosition_2 ( struct Simple s ) {
    long _result = 0;
    HRESULT _hr = raw_structGetPosition_2(s, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline struct Simple _Arrays::Gets ( ) {
    struct Simple _result;
    HRESULT _hr = get_s(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Arrays::Puts ( struct Simple pRetVal ) {
    HRESULT _hr = put_s(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}
